+-------------+--------------+--------------+-----------+---------------+
|Entropy Size |Entropy Bytes |Checksum Bits |Total Bits |Mnemonic Words |
+-------------+--------------+--------------+-----------+---------------+
|128 bits     |16 bytes      |4 bits        |132 bits   |12 words       |
|256 bits     |32 bytes      |8 bits        |164 bits   |24 words       |
+-------------+--------------+--------------+-----------+---------------+

Steps - binary private key to seed phrase:

1. Create a binary 128-bit or 256-bit private key.

2. Convert the 128-bit or 256-bit to 16 bytes or 32 bytes respectively.

3. Pass the bytes private key through a SHA-256 hash and convert returned hash to hexadecimal.

4. 128-bit PKs require 4-bit checksums - convert 1st hex digit to 4-bit binary.
   256-bit PKs require 8-bit checksums - convert 1st & 2nd hex digits to 8-bit binary.


##################################


data_from_mnemonic.py
================================================================================================
================================================================================================
================================================================================================

Uses assert to run tests on calculated word_indexes, private key and binary_checksum values.
Checks against supplied test data.


bip39.py
================================================================================================
================================================================================================
================================================================================================

+---------+---------+------------+
| Word    | Decimal | Binary     |
+---------+---------+------------+
|crater   |0404     |00110010100 |
|cloud    |0351     |00101011111 |
|drill    |0535     |01000010111 |
|young    |2042     |11111111010 |
|animal   |0072     |00001001000 |
|century  |0299     |00100101011 |
|earth    |0555     |01000101011 |
|siren    |1611     |11001001011 |
|because  |0158     |00010011110 |
|detail   |0482     |00111100010 |
|knock    |0990     |01111011110 |
|unfold   |1897     |11101101001 |
|error    |0614     |01001100110 |
|jaguar   |0953     |01110111001 |
|merry    |1117     |10001011101 |
|pistol   |1323     |10100101011 |
|fatigue  |0670     |01010011110 |
|nation   |1178     |10010011010 |
|wise     |2019     |11111100011 |
|clinic   |0345     |00101011001 |
|boss     |0209     |00011010001 |
|assault  |0108     |00001101100 |
|grape    |0814     |01100101110 |
|dinosaur |0499     |00111110011 |
+---------+---------+------------+

Concatenated 4 digit decimals (x24):
040403510535204200720299055516110158048209901897061409531117132306701178201903450209010808140499

24 words as 264-bit binary - Last 8 bits (11110011) are binary Checksum:
001100101000010101111101000010111111111110100000100100000100101011010001010111100100101100010011110001111000100111101111011101101001010011001100111011100110001011101101001010110101001111010010011010111111000110010101100100011010001000011011000110010111000111110011

Remove binary checksum to get 256-bit private key:
0011001010000101011111010000101111111111101000001001000001001010110100010101111001001011000100111100011110001001111011110111011010010100110011001110111001100010111011010010101101010011110100100110101111110001100101011001000110100010000110110001100101110001

Convert to 64-digit hexadecimal:
32857d0bffa0904ad15e4b13c789ef7694ccee62ed2b53d26bf19591a21b1971


possible_checksum_words.py
================================================================================================
================================================================================================
================================================================================================

Displays all possible BIP39 words for the final word of a 24 word seed phrase
that contains an 8-bit checksum matching '10100100':

00010100100| 164|behind
00110100100| 420|cruel
01010100100| 676|fee
01110100100| 932|innocent
10010100100|1188|nest
10110100100|1444|region
11010100100|1700|stand
11110100100|1956|virus


hex_bin_dec.py
================================================================================================
================================================================================================
================================================================================================

Displays table of hexadecimal, binary and decimal digits.

Defaults to 8-bit:

+-----+----------+---------+
| hex | binary   | decimal |
+-----+----------+---------+
| 0   | 0        | 0       |
| 1   | 1        | 1       |
| 2   | 10       | 2       |
| ... | ...      | ...     |
| FF  | 11111111 | 255     |
+-----+----------+---------+

Supply required number of bits on command line (12-bit max). For example:

hex_bin_dec.py 2

+-----+----------+---------+
| hex | binary   | decimal |
+-----+----------+---------+
| 0   | 0        | 0       |
| 1   | 1        | 1       |
| 2   | 10       | 2       |
| 3   | 11       | 3       |
+-----+----------+---------+

hex_bin_dec.py 3

+-----+----------+---------+
| hex | binary   | decimal |
+-----+----------+---------+
| 0   | 0        | 0       |
| 1   | 1        | 1       |
| 2   | 10       | 2       |
| 3   | 11       | 3       |
| 4   | 100      | 4       |
| 5   | 101      | 5       |
| 6   | 110      | 6       |
| 7   | 111      | 7       |
+-----+----------+---------+




keyboard_type.py
================================================================================================
================================================================================================
================================================================================================

A function that types out text at different speeds (dependent on supplied argument).

Automatically prints a newline at the end, unless end="" supplied as an argument.
